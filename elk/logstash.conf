input {
  beats {
    port => 5044
  }
}

filter {
  json {
    source => "message"
  }
  
  # Flatten the nested OpenTelemetry structure
  if [resourceLogs] {
    # Extract service name and other fields from resource attributes
    ruby {
      code => "
        if event.get('resourceLogs') && !event.get('resourceLogs').empty?
          resource = event.get('resourceLogs')[0]['resource']
          if resource && resource['attributes']
            resource['attributes'].each do |attr|
              if attr['key'] == 'service.name' && attr['value']['stringValue']
                event.set('[service][name]', attr['value']['stringValue'])
              end
              if attr['key'] == 'telemetry.sdk.name' && attr['value']['stringValue']
                event.set('[telemetry][sdk][name]', attr['value']['stringValue'])
              end
              if attr['key'] == 'telemetry.sdk.version' && attr['value']['stringValue']
                event.set('[telemetry][sdk][version]', attr['value']['stringValue'])
              end
            end
          end
        end
      "
    }
    
    # Extract log records and their timestamps
    ruby {
      code => "
        if event.get('resourceLogs') && !event.get('resourceLogs').empty?
          scope_logs = event.get('resourceLogs')[0]['scopeLogs']
          if scope_logs && !scope_logs.empty? && scope_logs[0]['logRecords'] && !scope_logs[0]['logRecords'].empty?
            # Get first record timestamp
            first_log = scope_logs[0]['logRecords'][0]
            if first_log['timeUnixNano']
              timestamp_ms = first_log['timeUnixNano'].to_i / 1000000
              event.set('[@metadata][timestamp]', timestamp_ms)
            end
            
            # Extract log levels
            log_levels = scope_logs[0]['logRecords'].map { |record| record['severityText'] }.uniq
            event.set('log_levels', log_levels)
            
            # Extract log messages
            log_messages = scope_logs[0]['logRecords'].map { |record| record['body']['stringValue'] }
            event.set('log_messages', log_messages)
          end
        end
      "
    }
  }
  
  # Use the timestamp we extracted
  date {
    match => ["[@metadata][timestamp]", "UNIX_MS"]
    target => "@timestamp"
    tag_on_failure => ["_dateparsefailure", "timestamp_nano_conversion_error"]
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "otel-logs-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "elastic"
  }
  stdout { codec => rubydebug }
}